import asyncio
from bot.bot import dp, bot
from DB.event import Event
from DB.user import User
from utils import *
from common import *
from parsing import run


async def parsing_and_notifications(test=False):
    while True:
        print("–ü–∞—Ä—Å–∏–Ω–≥ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        if not test:
            old_events_num = Event().get_all_events_ids()
            Event().drop_table()
            all_events_num = await run.main()

            new_events_num = set(all_events_num) - set(old_events_num)
            new_events = [Event().get_by_event_id(event_id) for event_id in new_events_num]
            sports = [i.sport for i in new_events]

            users = User().get_users_with_notifications()
            for user in users:
                if user.tg_id and sports.count(user.sport):
                    message = (f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–ë—ã–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–≤—ã–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ, "
                            f"–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã: {sports.count(user.sport)} —à—Ç, —Å–ø–æ—Ä—Ç {user.sport} üîù")
                    try:
                        await bot.send_message(user.tg_id, message)
                    except Exception as e:
                        print("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞")
                        pass

        await asyncio.sleep(7 * 24 * 60 * 60)

