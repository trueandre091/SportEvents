from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.bot import bot
import logging
import os
from dotenv import load_dotenv
import smtplib
from smtplib import SMTPRecipientsRefused
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

load_dotenv()

logger = logging.getLogger(__name__)

async def send_event_notification(
    telegram_id: int,
    message: str,
    event_data: dict
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ —á–µ—Ä–µ–∑ Telegram.
    
    Args:
        telegram_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        event_data (dict): –î–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏–∏
    
    Returns:
        bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–æ–±—ã—Ç–∏—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–æ–±—ã—Ç–∏–∏",
                url=f"{os.getenv('MAIN_URL')}/events/{event_data['id']}"
            )
        ]])

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        detailed_message = (
            f"{message}\n\n"
            f"üèÜ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {event_data['sport']}\n"
            f"üìç –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {event_data['place']}\n"
            f"üïí –ù–∞—á–∞–ª–æ: {event_data['start_time']}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await bot.send_message(
            chat_id=telegram_id,
            text=detailed_message,
            reply_markup=keyboard
        )
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return False 

async def send_email_notification(
    to_email: str,
    message: str,
    event_data: dict
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ –ø–æ email —á–µ—Ä–µ–∑ Gmail SMTP.
    
    Args:
        to_email (str): Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        event_data (dict): –î–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏–∏
    
    Returns:
        bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    """
    try:
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gmail SMTP
        smtp_server = "smtp.gmail.com"
        smtp_port = 587
        sender_email = os.getenv("GMAIL_USER")
        sender_password = os.getenv("GMAIL_APP_PASSWORD")

        # –°–æ–∑–¥–∞–µ–º HTML-–≤–µ—Ä—Å–∏—é –ø–∏—Å—å–º–∞
        html_content = f"""
        <html>
            <body style="font-family: Arial, sans-serif;">
                <h2>{message}</h2>
                <div style="margin: 20px 0;">
                    <p><strong>üèÜ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞:</strong> {event_data['sport']}</p>
                    <p><strong>üìç –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</strong> {event_data['place']}</p>
                    <p><strong>üïí –ù–∞—á–∞–ª–æ:</strong> {event_data['start_time']}</p>
                </div>
                <div style="margin-top: 30px;">
                    <a href="{os.getenv('MAIN_URL')}/events/{event_data['id']}" 
                       style="background-color: #4CAF50; color: white; padding: 10px 20px; 
                              text-decoration: none; border-radius: 5px;">
                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–æ–±—ã—Ç–∏–∏
                    </a>
                </div>
            </body>
        </html>
        """

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = MIMEMultipart('alternative')
        msg['Subject'] = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏"
        msg['From'] = sender_email
        msg['To'] = to_email

        # –î–æ–±–∞–≤–ª—è–µ–º HTML-–≤–µ—Ä—Å–∏—é
        msg.attach(MIMEText(html_content, 'html'))

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Å–ø–∞–º
        msg['List-Unsubscribe'] = f'<{os.getenv("MAIN_URL")}/unsubscribe?email={to_email}>'
        msg.add_header('List-Unsubscribe-Post', 'List-Unsubscribe=One-Click')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(sender_email, sender_password)
            server.send_message(msg)

        return True
    
    except SMTPRecipientsRefused as e:
        logger.info(f"–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω: {to_email}", e)
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –¥–ª—è {to_email}: {e}")
        return False 